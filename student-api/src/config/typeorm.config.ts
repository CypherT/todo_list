// src/config/typeorm.config.ts

import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';
import { User } from '../user/user.entity';
import { Todo } from '../todos/todo.entity';

@Injectable()
export class TypeOrmConfigService implements TypeOrmOptionsFactory {
  constructor(private configService: ConfigService) {}

  createTypeOrmOptions(): TypeOrmModuleOptions {
    // Láº¥y tá»«ng var riÃªng láº» tá»« .env.dev (thay vÃ¬ object 'database')
    const host = this.configService.get<string>('DATABASE_HOST');
    const port = this.configService.get<number>('DATABASE_PORT');
    const username = this.configService.get<string>('DATABASE_USER');
    const password = this.configService.get<string>('DATABASE_PASSWORD');
    const database = this.configService.get<string>('DATABASE_NAME');

    // Kiá»ƒm tra náº¿u thiáº¿u config (thay vÃ¬ check object)
    if (!host || !port || !username || !database) {
      throw new Error(
        'Cáº¥u hÃ¬nh cÆ¡ sá»Ÿ dá»¯ liá»‡u bá»‹ thiáº¿u. Kiá»ƒm tra file .env.dev cÃ³ Ä‘áº§y Ä‘á»§ DATABASE_* vars khÃ´ng:\n' +
          '- DATABASE_HOST\n' +
          '- DATABASE_PORT\n' +
          '- DATABASE_USER\n' +
          '- DATABASE_PASSWORD\n' +
          '- DATABASE_NAME',
      );
    }

    // Log config Ä‘á»ƒ debug (xÃ³a sau náº¿u khÃ´ng cáº§n)
    console.log('ðŸ”Œ DB Config:', {
      host,
      port,
      database,
      // KhÃ´ng log password
    });

    return {
      type: 'mysql' as const,
      host,
      port,
      username,
      password: password || '', // Náº¿u pass rá»—ng (nhÆ° root XAMPP), dÃ¹ng ''
      database,
      entities: [User, Todo],
      synchronize: true, // Táº¡m true Ä‘á»ƒ tá»± táº¡o table (Ä‘á»•i false á»Ÿ production)
      logging: true, // Báº­t log query Ä‘á»ƒ debug
    };
  }
}
